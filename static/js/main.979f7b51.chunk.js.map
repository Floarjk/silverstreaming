{"version":3,"sources":["Containers/ViewContainer.js","Containers/BroadcastContainer.js","App.js","serviceWorker.js","index.js"],"names":["config","iceServers","ViewContainer","props","peerConnection","useState","source","setSource","useEffect","socket","socketIOClient","window","location","origin","on","id","description","RTCPeerConnection","setRemoteDescription","then","createAnswer","sdp","setLocalDescription","emit","localDescription","ontrack","event","streams","onicecandidate","candidate","addIceCandidate","RTCIceCandidate","catch","e","console","error","close","disconnect","className","autoPlay","controls","playsInline","src","peerConnections","BroadcastContainer","audioSelect","useRef","videoSelect","videoElement","getDevices","navigator","mediaDevices","enumerateDevices","gotDevices","deviceInfos","deviceInfo","option","document","createElement","value","deviceId","kind","text","label","current","length","appendChild","getStream","stream","getTracks","forEach","track","stop","audioSource","videoSource","constraints","audio","exact","undefined","video","getUserMedia","gotStream","handleError","selectedIndex","options","findIndex","getAudioTracks","getVideoTracks","srcObject","addTrack","createOffer","ref","onChange","App","viewerMode","setMode","onClick","preventDefault","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.979f7b51.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport socketIOClient from \"socket.io-client\";\r\nconst ENDPOINT = \"http://127.0.0.1:4000\";\r\n\r\nconst config = {\r\n    iceServers: [\r\n        { \r\n          \"urls\": \"stun:stun.l.google.com:19302\",\r\n        },\r\n        // { \r\n        //   \"urls\": \"turn:TURN_IP?transport=tcp\",\r\n        //   \"username\": \"TURN_USERNAME\",\r\n        //   \"credential\": \"TURN_CREDENTIALS\"\r\n        // }\r\n    ]\r\n  };\r\n\r\nexport default function ViewContainer(props) {\r\n    const [source, setSource] = useState(\"\");\r\n    let peerConnection;\r\n\r\n    useEffect(() => {\r\n        const socket = socketIOClient(window.location.origin);\r\n        socket.on(\"offer\", (id, description) => {\r\n            peerConnection = new RTCPeerConnection(config);\r\n            peerConnection\r\n              .setRemoteDescription(description)\r\n              .then(() => peerConnection.createAnswer())\r\n              .then(sdp => peerConnection.setLocalDescription(sdp))\r\n              .then(() => {\r\n                socket.emit(\"answer\", id, peerConnection.localDescription);\r\n              });\r\n            peerConnection.ontrack = event => {\r\n                setSource(event.streams[0]);\r\n              \r\n            };\r\n            peerConnection.onicecandidate = event => {\r\n              if (event.candidate) {\r\n                socket.emit(\"candidate\", id, event.candidate);\r\n              }\r\n            };\r\n          });\r\n          \r\n          \r\n          socket.on(\"candidate\", (id, candidate) => {\r\n            peerConnection\r\n              .addIceCandidate(new RTCIceCandidate(candidate))\r\n              .catch(e => console.error(e));\r\n          });\r\n          \r\n          socket.on(\"connect\", () => {\r\n            socket.emit(\"watcher\");\r\n          });\r\n          \r\n          socket.on(\"broadcaster\", () => {\r\n            socket.emit(\"watcher\");\r\n          });\r\n          \r\n          socket.on(\"disconnectPeer\", () => {\r\n            peerConnection.close();\r\n          });\r\n\r\n          return () => socket.disconnect();\r\n\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <video \r\n                className=\"mainVideoPlayer\"\r\n                autoPlay \r\n                controls \r\n                playsInline\r\n                src={source}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n","import React, { useState, useEffect, useRef } from 'react'\r\nimport socketIOClient from \"socket.io-client\";\r\nconst ENDPOINT = \"http://127.0.0.1:4000\";\r\nconst peerConnections = {};\r\nconst config = {\r\n  iceServers: [\r\n    { \r\n      \"urls\": \"stun:stun.l.google.com:19302\",\r\n    },\r\n    // { \r\n    //   \"urls\": \"turn:TURN_IP?transport=tcp\",\r\n    //   \"username\": \"TURN_USERNAME\",\r\n    //   \"credential\": \"TURN_CREDENTIALS\"\r\n    // }\r\n  ]\r\n};\r\n\r\nexport default function BroadcastContainer(props) {\r\n\r\n    const audioSelect = useRef();\r\n    const videoSelect = useRef();\r\n    const videoElement = useRef();\r\n    const socket = socketIOClient(window.location.origin);\r\n\r\n    useEffect(() => {\r\n        getStream()\r\n            .then(getDevices)\r\n            .then(gotDevices);\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        \r\n        \r\n\r\n            socket.on(\"answer\", (id, description) => {\r\n                peerConnections[id].setRemoteDescription(description);\r\n            });\r\n            \r\n            socket.on(\"watcher\", id => {\r\n                const peerConnection = new RTCPeerConnection(config);\r\n                peerConnections[id] = peerConnection;\r\n            \r\n                let stream = videoElement.current.srcObject;\r\n                stream.getTracks().forEach(track => peerConnection.addTrack(track, stream));\r\n            \r\n                peerConnection.onicecandidate = event => {\r\n                if (event.candidate) {\r\n                    socket.emit(\"candidate\", id, event.candidate);\r\n                }\r\n                };\r\n            \r\n                peerConnection\r\n                .createOffer()\r\n                .then(sdp => peerConnection.setLocalDescription(sdp))\r\n                .then(() => {\r\n                    socket.emit(\"offer\", id, peerConnection.localDescription);\r\n                });\r\n            });\r\n            \r\n            socket.on(\"candidate\", (id, candidate) => {\r\n                peerConnections[id].addIceCandidate(new RTCIceCandidate(candidate));\r\n            });\r\n            \r\n            socket.on(\"disconnectPeer\", id => {\r\n                peerConnections[id].close();\r\n                delete peerConnections[id];\r\n            });\r\n\r\n            return () => socket.disconnect();\r\n\r\n    }, []);\r\n\r\n    function getDevices() {\r\n        return navigator.mediaDevices.enumerateDevices();\r\n      }\r\n      \r\n      function gotDevices(deviceInfos) {\r\n        window.deviceInfos = deviceInfos;\r\n        for (const deviceInfo of deviceInfos) {\r\n          const option = document.createElement(\"option\");\r\n          option.value = deviceInfo.deviceId;\r\n          if (deviceInfo.kind === \"audioinput\") {\r\n            option.text = deviceInfo.label || `Microphone ${audioSelect.current.length + 1}`;\r\n            audioSelect.current.appendChild(option);\r\n          } else if (deviceInfo.kind === \"videoinput\") {\r\n            option.text = deviceInfo.label || `Camera ${videoSelect.current.length + 1}`;\r\n            videoSelect.current.appendChild(option);\r\n          }\r\n        }\r\n      }\r\n      \r\n      function getStream() {\r\n        if (window.stream) {\r\n          window.stream.getTracks().forEach(track => {\r\n            track.stop();\r\n          });\r\n        }\r\n        const audioSource = audioSelect.current.value;\r\n        const videoSource = videoSelect.current.value;\r\n        const constraints = {\r\n          audio: { deviceId: audioSource ? { exact: audioSource } : undefined },\r\n          video: { deviceId: videoSource ? { exact: videoSource } : undefined }\r\n        };\r\n        return navigator.mediaDevices\r\n          .getUserMedia(constraints)\r\n          .then(gotStream)\r\n          .catch(handleError);\r\n      }\r\n      \r\n      function gotStream(stream) {\r\n        window.stream = stream;\r\n        audioSelect.current.selectedIndex = [...audioSelect.current.options].findIndex(\r\n          option => option.text === stream.getAudioTracks()[0].label\r\n        );\r\n        videoSelect.current.selectedIndex = [...videoSelect.current.options].findIndex(\r\n          option => option.text === stream.getVideoTracks()[0].label\r\n        );\r\n        videoElement.current.srcObject = stream;\r\n        socket.emit(\"broadcaster\");\r\n      }\r\n      \r\n      function handleError(error) {\r\n        console.error(\"Error: \", error);\r\n      }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <video \r\n                className=\"mainVideoPlayer\"\r\n                autoPlay \r\n                controls \r\n                playsInline\r\n            />\r\n\r\n            <section className=\"select\">\r\n\r\n                <select ref={audioSelect} onChange={getStream}></select>\r\n            </section>\r\n\r\n            <section className=\"select\">\r\n\r\n                <select ref={videoSelect} onChange={getStream}></select>\r\n            </section>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport ViewContainer from './Containers/ViewContainer';\nimport BroadcastContainer from './Containers/BroadcastContainer';\n\nfunction App() {\n\n  const [viewerMode, setMode] = useState(true);\n\n  function handleClick(e) {\n    e.preventDefault();\n    setMode(!viewerMode);\n  }\n\n  return (\n    <div className=\"App\">\n      {viewerMode}\n      {\n        viewerMode  ? (\n          <ViewContainer />\n        ) : (\n          <BroadcastContainer/>\n        )\n      }\n      <button onClick={handleClick}>Clicky</button>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}